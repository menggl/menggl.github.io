<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JAVA虚拟机之运行时数据区]]></title>
    <url>%2F2018%2F08%2F07%2FJAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%2F</url>
    <content type="text"><![CDATA[JAVA运行时数据区域(runtime data area)java运行时数据区可以分为6个区域 Java堆 Java虚拟机栈 本地方法栈 方法区 运行时常量池 程序计数器 线程私有的有： 程序计数器 本地方法栈 java虚拟机栈 线程共有的有： java堆 方法区 运行时常量池 PC程序计数器可以理解为一块较小的内存空间，可以看做是当前线程执行字节码的行号计数器，一个线程分配一小块，以便记录当前线程执行的上线文环境，多线程切换时将上线文环境数据保存和加载。如果线程执行到本地方法，则PC程序计数器不会记录本地方法的上下文（没有字节码可以记录啊）。 Java虚拟机栈每个java线程都会拥有一块Java虚拟机栈的内存空间，Java虚拟机栈记录的是每个JAVA方法执行时候的内存模型，每调用一个JAVA方法的时候都会在Java虚拟机栈里面创建一个栈帧每个栈帧都会包含下面几个部分： 局部变量表 操作数栈 动态链接 方法返回地址 下面我们解释一下栈帧中各个部分都是干什么用的 局部变量表 作用：保存方法中的参数、局部变量等 如果这个栈帧是实例的方法栈帧，这个局部变量表第0个Slot肯定就是this（当前的实例），然后方法中的局部变量从第1个Slot开始 局部变量表以变量槽Slot为基本单位，在32位虚拟机中一个变量槽可以保存一个32位以内的数据类型（boolean、byte、char、short、int、float、reference和returnAddress八种），对于64位的数据用连续的两个变量槽来记录 如果方法中的某个变量的作用域结束了，那么这个变量对应的slot内存就可以被其它变量覆盖重用了 returnAddress类型是为字节码指令：jsr、jsr_w、ret服务的，它指向了一条字节码指令的地址（返回上一个调用该方法的字节码地址？） 引用类型reference没有明确规定它的长度 在java程序被编译成class文件时，就在方法的Code属性的max_locals数据项中确定该方法需要分配的局部变量表的内存大小 操作数栈 就像汇编一样，jvm也有指令集，java指令集是由一个字节表示的，也就是说指令集不超过256个，现在的java指令集也就200多条 指令运行时需要读取数据，处理完成后需要保存数据，这个操作数栈就是用来保存这些指令执行中需要的参数数据和结果数据的 操作数分两种，一种直接嵌入到指令中，可以叫做是嵌入操作数；还有一种是会压入操作数栈，这种可以叫做栈中操作数 嵌入操作数在编译期就已经确定好了，比如putstatic指令，将数据赋值给一个静态变量，该静态变量就是一个嵌入式操作数，它会紧跟指令，用两个字节表示，这个操作数是一个索引值，索引值指向的是运行时常量池中该静态字段对应的符号引用，由于符号引用中包含了这个静态变量的基本信息，如所属类、简单名称、描述符，这样指令就知道要给哪个类的哪个字段赋值了 栈中操作数是在运行期动态确定的数据，比如一个指令需要两个参数，需要先把两个参数放入操作数栈中，使用后出栈，将运行结果再入栈 动态链接 静态链接是在类加载的时候或者第一次使用的时候就将符号引用确定下来直接引用的过程 动态链接是在代码执行的时候才会确定符号引用对应的直接引用地址的过程 方法返回地址这个应该就保存在局部变量表中吧 本地方法栈与java虚拟机栈类似，为Java使用到的本地方法提供服务用的。 当java线程调用了一个本地方法时，它就会进入一个全新的不受java虚拟机限制的世界，本地方法还可以反过来通过本地方法接口来访问虚拟机的运行时数据区 如果某个虚拟机实现的本地方法接口是使用C连接模型的话，那么它的本地方法栈就是C栈 下面是定义了一个java的Native Method，类似于定义了一个接口123456public class IHaveNatives&#123; native public void Native1( int x ) ; native static public long Native2() ; native synchronized private float Native3( Object o ) ; native void Native4( int[] ary ) throws Exception ;&#125; Java堆 java堆是被所有线程共享的一块内存区域 所有的对象和数组的内存分配都在堆上面 为了垃圾收集方便，java堆又可以分为新生代、老年代和永久代（也叫方法区，jdk1.8中没有永久代，用metaspace实现）三块区域 方法区 保存虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码Class等数据 jdk6时，字符串常量是保存在方法区中的，jdk7开始，已将其移到堆中了 常量池配置参数-Xss // 设置JVM栈的大小-Xms // 初始堆内存大小-Xmx // 最大堆内存大小 -Xmn // 年轻代的内存大小 虚拟机调优]]></content>
      <categories>
        <category>经典</category>
      </categories>
      <tags>
        <tag>虚拟机</tag>
        <tag>性能调优</tag>
        <tag>JVM参数</tag>
        <tag>垃圾回收</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA虚拟机之类加载器]]></title>
    <url>%2F2018%2F08%2F06%2FJAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%2F</url>
    <content type="text"><![CDATA[java虚拟机组成： 类加载器：加载类用的 执行引擎：执行java代码用的 运行时数据区：相当于操作系统内存，保存虚拟机运行时的缓存数据用的，是一块需要优化的部分 类加载器将java的.class文件按照规范加载到运行时数据区的方法区中，以供执行引擎解释执行 每个类加载器将class文件加载完之后，都会将全限定名(包名+类名)保存起来，也就是说每一个类加载器只能加载一份全限定名的class文件不同的类加载器可以加载相同的全限定名文件 java类加载器是分层级的，最顶级的类加载器是BootstrapClassLoader，其次的类加载器是ExtClassLoader，最后才是AppClassLoader结构如下所示：12345--BootstrapClassLoader 加载$JAVA_HOME$/lib/rt.jar下的类----ExtClassLoader 加载$JAVA_HOME$/lib/ext.jar下的类------AppClassLoader--------URLClassLoader spring中的类加载器----------WebappClassLoader 在tomcat中部署的每个项目都会创建一个类加载器，以保证加载的相同命名空间（不同项目、不同实现）的类加载后不同，以实现隔离项目冲突的目的 各个类加载器之间是组合的关系，不是继承的关系 双亲委派模型当一个classLoader想加载一个class文件的时候，首先从当前ClassLoader查找有没有加载过这个class，如果没有加载过就去父加载器里查有没有加载过这个class，最后直到BootstrapClassLoader顶级加载器也没有加载过这个class，才会从顶级加载器开始尝试加载这个class，然后是子加载器，最后直到当前ClassLoader都加载class失败，这个类才是加载失败! 下面是ClassLoader.loadClass的代码实现1234567891011121314151617181920212223242526272829303132333435363738protected Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException&#123; // 加载一个类的时候需要加锁，防止并发加载同一个类时出现冲突 synchronized (getClassLoadingLock(name)) &#123; // 看看这个类是否已经被当前类加载器加载过 Class&lt;?&gt; c = findLoadedClass(name); // 如果没有被加载过会返回null if (c == null) &#123; long t0 = System.nanoTime(); try &#123; // 找到当前类加载器的父类加载器加载这个命名空间下的class if (parent != null) &#123; c = parent.loadClass(name, false); &#125; else &#123;// 如果父加载器是null，则说明当前委托的类加载器已经到顶了，到BootstrapClassLoader了 c = findBootstrapClassOrNull(name); &#125; &#125; catch (ClassNotFoundException e) &#123; // ClassNotFoundException thrown if class not found // from the non-null parent class loader &#125; // 如果父加载器没有加载过这个class，并且也不能加载这个class，则只能当前类加载器尝试去加载这个类了 if (c == null) &#123; // If still not found, then invoke findClass in order // to find the class. long t1 = System.nanoTime(); c = findClass(name); // this is the defining class loader; record the stats sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); &#125; &#125; if (resolve) &#123; resolveClass(c); &#125; return c; &#125;&#125; 测试类加载器加载顺序No1.创建下面的类，并将编译好的class文件及命名空间文件夹放到D:\temp目录下面12345public class HelloLoader &#123; public void print() &#123; System.out.println("I am in BootstrapClassLoader!"); &#125;&#125; 然后修改本地HelloLoader类中的代码为：12345public class HelloLoader &#123; public void print() &#123; System.out.println("I am in AppClassLoader!"); &#125;&#125; 测试类定义：123456public class FindClassOrder &#123; public static void main(String[] args) &#123; HelloLoader helloLoader = new HelloLoader(); helloLoader.print(); &#125;&#125; 正常情况下会输出：I am in AppClassLoader! //ClassLoader加载的是本地HelloLoader定义的类 添加虚拟机运行参数：-Xbootclasspath/a:D:\temp（添加BootstrapClassLoader加载类路径的范围D:\temp） 再次运行时输出变成了：I am in BootstrapClassLoader! //ClassLoader加载的是D:\temp目录下定义的类 No2.即使配置了运行参数：-Xbootclasspath/a:D:\temp，如果AppClassLoader强行加载某个类，创建对象的时候也不会用到父加载器加载到的同命名空间下的类1234567891011121314151617181920212223242526272829303132import java.io.File;import java.io.FileInputStream;import java.lang.reflect.Method;import org.apache.commons.io.IOUtils;public class FindClassOrder &#123; public static void main(String[] args) throws Exception &#123; // 使用appClassLoader强行加载HelloLoader这个class ClassLoader classLoader = FindClassOrder.class.getClassLoader(); byte[] bHelloLoader = loadClassBytes("D:\\temp\\com\\test\\HelloLoader.class"); Method defineClassMethod = ClassLoader.class.getDeclaredMethod("defineClass", byte[].class,int.class,int.class); defineClassMethod.setAccessible(true); defineClassMethod.invoke(classLoader, new Object[]&#123;bHelloLoader,0,bHelloLoader.length&#125;); defineClassMethod.setAccessible(false); // 当前AppClassLoader强行加载了HelloLoader这个类，就不会再使用父加载器加载的这个类了 HelloLoader helloLoader = new HelloLoader(); helloLoader.print(); &#125; public static byte[] loadClassBytes(String filePath) throws Exception &#123; return IOUtils.toByteArray(new FileInputStream(new File(filePath))); &#125; /* &lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt; IOUtils使用到的jar包 &lt;dependency&gt; &lt;groupId&gt;commons-io&lt;/groupId&gt; &lt;artifactId&gt;commons-io&lt;/artifactId&gt; &lt;version&gt;2.6&lt;/version&gt; &lt;/dependency&gt; */&#125; 双亲委托模型的弊端：父类加载器无法访问子类加载器的对象。比如父类加载器定义一个接口，同时绑定一个工厂方法，由于接口实现类不在父加载器中，所以无法访问和创建实例 No3.父加载器加载的类，不能访问加载子加载器加载的类1.编译下面java，将class文件放入D:\temp目录下面1234567public class HelloLoader &#123; public void print() &#123; System.out.println("I am in BootstrapClassLoader!"); System.out.println(Thread.currentThread().getContextClassLoader()); new HelloChildLoader().print(); &#125;&#125; 2.本地java1234567public class HelloLoader &#123; public void print() &#123; System.out.println("I am in AppClassLoader!"); System.out.println(Thread.currentThread().getContextClassLoader()); new HelloChildLoader().print(); &#125;&#125; 12345public class HelloChildLoader &#123; public void print() &#123; System.out.println("I am HelloChildLoader!"); &#125;&#125; 123456public class FindClassOrder &#123; public static void main(String[] args) &#123; HelloLoader helloLoader = new HelloLoader(); helloLoader.print(); &#125;&#125; 上面的main方法运行之后输出结果：12345I am in BootstrapClassLoader! sun.misc.Launcher$AppClassLoader@c387f44 &lt;br&gt;Exception in thread "main" java.lang.NoClassDefFoundError: com/test/HelloChildLoader at com.test.HelloLoader.print(HelloLoader.java:7)at com.test.FindClassOrder.main(FindClassOrder.java:6) 修改main方法：1234567891011121314151617181920212223import java.io.File;import java.io.FileInputStream;import java.lang.reflect.Method;import org.apache.commons.io.IOUtils;public class FindClassOrder &#123; public static void main(String[] args) throws Exception &#123; // 使用appClassLoader强行加载HelloLoader这个class ClassLoader classLoader = FindClassOrder.class.getClassLoader(); byte[] bHelloLoader = loadClassBytes("D:\\tmp\\com\\test\\HelloLoader.class"); Method defineClassMethod = ClassLoader.class.getDeclaredMethod("defineClass", byte[].class,int.class,int.class); defineClassMethod.setAccessible(true); defineClassMethod.invoke(classLoader, new Object[]&#123;bHelloLoader,0,bHelloLoader.length&#125;); defineClassMethod.setAccessible(false); // 当前AppClassLoader强行加载了HelloLoader这个类，就不会再使用父加载器加载的这个类了 HelloLoader helloLoader = new HelloLoader(); helloLoader.print(); &#125; public static byte[] loadClassBytes(String filePath) throws Exception &#123; return IOUtils.toByteArray(new FileInputStream(new File(filePath))); &#125;&#125; 运行上面代码，结果如下：123I am in BootstrapClassLoader!sun.misc.Launcher$AppClassLoader@c387f44I am HelloChildLoader! 以上结果表明： 父类加载器加载的class不能直接创建子类加载器加载的类，因为父类加载器没有访问子类加载器加载的类的权限 解决方法： 父类加载器使用Thread.currentThread().getContextClassLoader()可以获取到子类加载器ClassLoader，进而可以创建子类加载器加载的对象 以下是测试用例：创建一个待被应用类加载器加载的类HelloChildLoader12345public class HelloChildLoader &#123; public void print() &#123; System.out.println("this is HelloChildLoader!"); &#125;&#125; 将下面编译后的class拷贝到D:\temp目录下123456public class HelloLoader &#123; public void print() throws Exception &#123; System.out.println("I am in BootstrapClassLoader!"); new HelloChildLoader().print(); &#125;&#125; 本地HelloLoader实现如下123456public class HelloLoader &#123; public void print() throws Exception &#123; System.out.println("I am in AppClassLoader!"); new HelloChildLoader().print(); &#125;&#125; 测试类代码如下：123456public class FindClassOrder &#123; public static void main(String[] args) throws Exception &#123; HelloLoader helloLoader = new HelloLoader(); helloLoader.print(); &#125;&#125; 配置虚拟机运行时参数：-Xbootclasspath/a:D:\temp运行后结果如下：1234I am in BootstrapClassLoader!Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: com/test/classloader/HelloChildLoader at com.test.classloader.HelloLoader.print(HelloLoader.java:6) at com.test.classloader.FindClassOrder.main(FindClassOrder.java:6) 以上运行结果表明，启动类加载器不能直接加载和创建应用类加载器的类对象 修改D:\temp目录下的类实现：1234567891011public class HelloLoader &#123; public void print() throws Exception &#123; System.out.println("I am in BootstrapClassLoader!"); ClassLoader classLoader = Thread.currentThread().getContextClassLoader(); Class&lt;?&gt; helloChildLoaderClazz = Class.forName("com.test.classloader.HelloChildLoader", false, classLoader); // 这里如果启动类加载器定义了HelloChildLoader的接口，就直接用接口接收就可以了，不用反射调用了 Object helloChildLoader = helloChildLoaderClazz.newInstance(); Method printMethod = helloChildLoaderClazz.getDeclaredMethod("print",new Class[]&#123;&#125;); printMethod.invoke(helloChildLoader, new Object[]&#123;&#125;); &#125;&#125; 执行main方法运行结果如下：12I am in BootstrapClassLoader!this is HelloChildLoader! 上面运行结果表明： 启动类加载器加载的类中，我们可以通过应用类加载器(通过Thread.currentThread().getContextClassLoader()获取)和要加载应用类的全限定名，我们就可以得到应用类加载器的实例对象 热部署自定义一个ClassLoader，用于实现热部署12345678910111213141516171819202122232425262728public class MyClassLoader extends ClassLoader &#123; private String fileName; public MyClassLoader(String fileName) &#123; this.fileName = fileName; &#125; @Override protected Class&lt;?&gt; findClass(String className) throws ClassNotFoundException &#123; Class&lt;?&gt; clazz = this.findLoadedClass(className); // 如果当前类被加载过，就不会重复去加载 if (clazz == null) &#123; try &#123; String classFile = getClassFile(className); byte[] bytes = IOUtils.toByteArray(new FileInputStream(new File(classFile))); return super.defineClass(className, bytes, 0, bytes.length); &#125; catch (FileNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; return clazz; &#125; private String getClassFile(String classFile) &#123; return this.fileName + "/" + classFile.replaceAll("[.]", "/") + ".class"; &#125;&#125; 定义一个需要热部署的类12345public class DemoA &#123; public void hot()&#123; System.out.println("OldDemoA is Running!"); &#125;&#125; 测试类代码123456789101112131415161718192021public class DoopRun &#123; public static void main(String[] args) &#123; while(true)&#123; try &#123; // 每次循环都重新创建MyClassLoader保证没有加载过DemoA这个类 MyClassLoader loader = new MyClassLoader("D:\\temp"); Class&lt;?&gt; clazz = loader.loadClass("com.test.classloader.DemoA"); Object demoA = clazz.newInstance(); Method m = demoA.getClass().getMethod("hot", new Class[]&#123;&#125;); m.invoke(demoA, new Object[]&#123;&#125;); &#125; catch (Exception e) &#123; System.out.println("not find!"); &#125; try &#123; Thread.sleep(2000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125; 将DemoA.class文件放入D:\temp目录下面，并保证当前main启动环境下没有这个类定义启动main，每隔一段时间输出打印”OldDemoA is Running!”，结果如下：123OldDemoA is Running!OldDemoA is Running!OldDemoA is Running! 修改D:\temp目录下的DemoA类定义为下面代码：12345public class DemoA &#123; public void hot()&#123; System.out.println("NewDemoA is Running!"); &#125;&#125; 然后覆盖到D:\temp目录下面，输出打印变成如下：1234OldDemoA is Running!NewDemoA is Running!NewDemoA is Running!NewDemoA is Running!]]></content>
      <categories>
        <category>经典</category>
      </categories>
      <tags>
        <tag>虚拟机</tag>
        <tag>类加载器</tag>
        <tag>classloader</tag>
        <tag>双亲委派模型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F08%2F06%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Hello world]]></content>
  </entry>
</search>
